import numpy as np
import os, sys, pickle
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
from matplotlib import rc
from necessary_analysis_scripts import *

## plotting defaults
plt.rcParams.update({'font.size': 14})
rc('text', usetex=False)
plt.rcParams['pdf.fonttype'] = 42

font_file = "/Library/Fonts/HelveticaNeue-Light.ttf" #font file on Macs
if os.path.isfile(font_file): 
    prop = fm.FontProperties(fname=font_file,size=24)
else: 
    prop = fm.FontProperties(size=24)


figure_dir = '../figures' 


def calculate_attention_behavior(subj_dat):
    '''
    This function calculates the aggregate details of the sustained attention portion of the experiment

    INPUTS:
    -subj_dat           dict generated by the load_data function in necessary_analysis_scripts

    RETURNS:
    -freq_errorrate     average error rate to the frequent trials [1x#subjects]
    -infreq_errorrate   average error rate to the infrequent trials [1x#subjects]
    -aprime             sensitivity to the task [1x#subjects]
    '''

    #experiment details
    nsubj = len(subj_dat) #
    nblocks = 4
    ntrials = 800

    #preallocate
    freq_errorrate, infreq_errorrate, aprime = np.zeros(nsubj), np.zeros(nsubj), np.zeros(nsubj)

    #loop through each subject
    for isubj in range(nsubj):

        #trial accuracy
        acc = np.ravel(subj_dat[isubj].acc[:(nblocks*ntrials)]) 
        
        #locate frequent trials 
        freq_trials = np.ravel(subj_dat[isubj].freq_trials[:(nblocks*ntrials)]) 

        #frequent trial accuracy
        freq_errorrate[isubj] = 1-np.mean((acc[freq_trials==1]==1).astype(float))
        
        #false alarm rate to infreq trials
        infreq_errorrate[isubj] = np.mean((acc[freq_trials==0]!=1).astype(float))
        
        #calculate a prime
        aprime[isubj] = calculate_aprime(1-freq_errorrate[isubj],infreq_errorrate[isubj])

    return freq_errorrate,infreq_errorrate,aprime

def calculate_workingmemory_behavior(subj_dat):
    '''
    This function calculates the aggregate details of the working memory portion of the experiment

    INPUTS:
    -subj_dat             dict generated by the load_data function in necessary_analysis_scripts

    RETURNS:
    -wm_numcorr_alltrials accracy to each probe trial [1x#subjects]
    -wm_numcorr_meanperf  average accuracy to all probe trials [1x#subjects]
    '''

    nsubj = len(subj_dat)
    nblocks = 4
    ntrials = 800
    nprobes = int(np.sum(subj_dat[nsubj-1].probe_trials))

    wm_numcorr_alltrials = np.zeros((nsubj,nprobes),dtype=int)
    wm_numcorr_meanperf = np.zeros((nsubj))

    for isubj in range(nsubj):

        #whole report trials (boolean)
        probe_trials = np.ravel(subj_dat[isubj].probe_trials[:(nblocks*ntrials)])==1
        
        #number correct for all trials, even non-probed trials (which will be 0)
        wm_numcorr_alltrials[isubj] = np.ravel(subj_dat[isubj].wholereport_respacc_total[:(nblocks*ntrials)])[probe_trials]
        
        #whole report trial accuracy
        wm_numcorr_meanperf[isubj] = np.mean(wm_numcorr_alltrials[isubj])

    return wm_numcorr_alltrials,wm_numcorr_meanperf


#load data from Experiments 1a and 1b
dat_1a = load_data(project_name='expt1a')
dat_1b = load_data(project_name='expt1b')

#experiment 1a 
freq_1a,infreq_1a,aprime_1a = calculate_attention_behavior(dat_1a)
wm_t_1a,wm_m_1a = calculate_workingmemory_behavior(dat_1a)

#experiment 1b
freq_1b,infreq_1b,aprime_1b = calculate_attention_behavior(dat_1b)
wm_t_1b,wm_m_1b = calculate_workingmemory_behavior(dat_1b)

#combine results from both experiments
wm_t = np.append(wm_t_1a,wm_t_1b,axis=0) #append the wm trial behavior
nsubj = np.shape(wm_t)[0]                #total number of subjects
bins = np.arange(8)                      #how many bins for WM histogram
bin_height = np.empty((nsubj,np.size(bins)-1))
for isubj in range(nsubj):
	bin_height[isubj],_ = np.histogram(wm_t[isubj],bins,density=True)




##MAKE FIGURE
fig, ax = plt.subplots(1,3,figsize=(18.25,7),gridspec_kw = {'width_ratios':[1, 3,3]})

#FREQUENT TRIALS ACCURACY
ax[0].bar(0,1-np.mean(np.append(freq_1a,freq_1b)),1.5,color='None',edgecolor='k',linewidth=3)
ax[0].errorbar(0,1-np.mean(np.append(freq_1a,freq_1b)),
    yerr=np.std(np.append(freq_1a,freq_1b),axis=0)/np.sqrt(float(nsubj)),
	linestyle='None',color='k',linewidth=3,capsize=5,capthick=2)
ax[0].scatter(np.zeros(nsubj),1-np.append(freq_1a,freq_1b),color='k',alpha=.15,linewidths=None,edgecolors='none',clip_on=False)

#INFREQUENT TRIALS ACCURACY
ax[0].bar(3,1-np.mean(np.append(infreq_1a,infreq_1b)),1.5,color='None',edgecolor='k',linewidth=3)
ax[0].errorbar(3,1-np.mean(np.append(infreq_1a,infreq_1b)),
    yerr=np.std(np.append(infreq_1a,infreq_1b),axis=0)/np.sqrt(float(nsubj)),
	linestyle='None',color='k',linewidth=3,capsize=5,capthick=2)
ax[0].scatter(3+np.zeros(nsubj),1-np.append(infreq_1a,infreq_1b),color='k',alpha=.25,linewidths=None,edgecolors='none',clip_on=False)

prettify_plot(ax[0],ylrot=90,xlim=(-1,4),ylim=[0,1],
        xt=([0,3]),xtl=(['Frequent','Infrequent']),xl="",t='Attention',
        yt=([0,.25,.5,.75,1]),ytl=([0,.25,.5,.75,1]),yl='Accuracy')
ax[0].set_xticklabels((['Frequent','Infrequent']),fontsize=32,fontproperties=prop,
	rotation=45,horizontalalignment="right")
ax[0].tick_params(axis='x', which='major', pad=0)

#WORKING MEMORY MEAN # CORRECT
ax[1].bar(bins[:-1],np.mean(bin_height,axis=0),color='None',edgecolor='k',linewidth=3)
ax[1].errorbar(bins[:-1],np.mean(bin_height,axis=0),
    yerr=np.std(bin_height,axis=0)/np.sqrt(float(nsubj)),
	linestyle='None',color='k',linewidth=2,capsize=5,capthick=2)
for ib in bins[:-1]:
	ax[1].scatter(np.zeros(nsubj)+ib,bin_height[:,ib],color='k',alpha=.15,linewidths=None,edgecolors='none',clip_on=False)
prettify_plot(ax[1],ylrot=90,ylim=[0,.6],t='Working memory',
         yt=([0,.2,.4,.6]),ytl=([0,.2,.4,.6]),yl="Proportion",
         xt=(bins[:-1]),xtl=(bins[:-1]),xl='Probe performance\n#correct')

#CORRELATION
ax[2].scatter(1-np.append(infreq_1a,infreq_1b),np.append(wm_m_1a,wm_m_1b),300,'k',
	alpha=.5,linewidths=None,edgecolors='none',clip_on=False)
prettify_plot(ax[2],ylrot=90,xlim=(0,1),ylim=[0,4],t='Attention/memory relationship',
         yt=([0,1,2,3,4]),ytl=([0,1,2,3,4]),yl="Working memory\naverage # correct",
         xt=([0,.25,.5,.75,1]),xtl=([0,.25,.5,.75,1]),xl='Attention\ninfrequent trial accuracy')

#adjust the spacing
plt.subplots_adjust(hspace=1,wspace=.5)


fig.savefig(figure_dir+ '/figure1bc.pdf')
plt.show(block=False)

